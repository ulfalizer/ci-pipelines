jobs:
  - name: meta-zephyr-sdk_runCI
    type: runCI
    steps:
      - IN: meta-zephyr-sdk_ciRepo

  - name: sdk-ng_runCI
    type: runCI
    steps:
      - IN: s3-token-simple
      - IN: sdk-ng_ciRepo

  - name: ci-test_runCI
    type: runCI
    steps:
      - IN: daily-verify
      - IN: daily-verify-arm

  - name: create_sdk_ng
    type: runSh
    steps:
      - IN: s3-token
      - IN: sdk-ng_ciRepo
      - IN: sdk_ng_repo
        switch: off
      - IN: sdk-ng_runCI
      - IN: github_token
      - TASK:
        - script: |
            test -f /build/IN/sdk-ng_runCI/runCI/sdk.env && . /build/IN/sdk-ng_runCI/runCI/sdk.env;
            cat /build/IN/sdk-ng_runCI/runCI/sdk.env;
            export S3_PATH="s3://incoming.zephyrproject.org/sdk-ng/${SDKNG_CIREPO_VERSIONNAME}";
            sudo apt-get install -y makeself p7zip-full cpio tree;
            sudo pip install awscli;
            cd $(shipctl get_resource_state "sdk_ng_repo");
            ls -la;
            mkdir -p scripts/toolchains;
            aws s3 sync --quiet ${S3_PATH}/ scripts/toolchains;
            # create index for s3
            ls -la scripts/toolchains;
            chmod +x scripts/toolchains/*.sh;
            if [ "${PULL_REQUEST}" != "false" ]; then
              sed -i "s/$/-pr-${PULL_REQUEST}/" VERSION;
            fi;
            release=$(cat VERSION)
            if [ "${IS_PRERELEASE}" = "true" -o "${IS_RELEASE}" = "true" ]; then
              export S3_PUB_PATH="s3://builds.zephyrproject.org/sdk/${release}/"
            elif [ -n "${PULL_REQUEST}" ]; then
              export S3_PUB_PATH="s3://builds.zephyrproject.org/zephyrproject-rtos/sdk-ng/${PULL_REQUEST}/"
            fi
            echo "S3_PUB_PATH: ${S3_PUB_PATH}"
            pushd scripts/;
            tree -H '.' -L 1 --noreport --charset utf-8 toolchains > index.html
            ./make_zephyr_sdk.sh;
            sdk_filename=$(ls -1 zephyr-sdk*);
            toolchain_files=$(ls -1 zephyr-toolchain-*);
            echo "Uploading to S3";
            echo "SDK file name: ${sdk_filename}";
            echo "Toolchain file names: ${toolchain_files}";
            if [ ${S3_PUB_PATH} ]; then
              # Copy artifacts to a safe location for later download
              aws s3 sync ${S3_PATH} ${S3_PUB_PATH}
              aws s3 cp index.html ${S3_PUB_PATH}
            fi
            if [ "${IS_PRERELEASE}" = "true" -o "${IS_RELEASE}" = "true" ]; then
              # Define variables.
              GH_API="https://api.github.com"
              GH_REPO="$GH_API/repos/zephyrproject-rtos/sdk-ng"
              GH_TAGS="$GH_REPO/releases/tags/$GIT_TAG_NAME"
              AUTH="Authorization: token $GH_TOKEN"
              WGET_ARGS="--content-disposition --auth-no-challenge --no-cookie"
              CURL_ARGS="-LJO#"

              # Validate token.
              curl -o /dev/null -sH "$AUTH" $GH_REPO || { echo "Error: Invalid repo, token or network issue!";  exit 1; }

              # Read asset tags.
              response=$(curl -sH "$AUTH" $GH_TAGS)

              # Get ID of the asset based on given filename.
              eval $(echo "$response" | grep -m 1 "id.:" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
              [ "$id" ] || { echo "Error: Failed to get release id for tag: $tag"; echo "$response" | awk 'length($0)<100' >&2; exit 1; }

              # Upload asset
              echo "Uploading asset ${sdk_filename}... "
              # Construct url
              GH_ASSET="https://uploads.github.com/repos/zephyrproject-rtos/sdk-ng/releases/$id/assets?name=\"$(basename $sdk_filename)\""
              echo ${GH_ASSET}
              curl --data-binary @"${sdk_filename}" -H "Authorization: token $GH_TOKEN" -H "Content-Type: application/octet-stream" ${GH_ASSET};

              for toolchain in $toolchain_files; do
                # Upload asset
                echo "Uploading asset ${toolchain}... "
                # Construct url
                GH_ASSET="https://uploads.github.com/repos/zephyrproject-rtos/sdk-ng/releases/$id/assets?name=\"$(basename $toolchain)\""
                echo ${GH_ASSET}
                curl --data-binary @"${toolchain}" -H "Authorization: token $GH_TOKEN" -H "Content-Type: application/octet-stream" ${GH_ASSET};
              done
            fi
            if [ ${S3_PUB_PATH} ]; then
              echo "Uploading ${sdk_filename} to S3";
              aws s3 cp ${sdk_filename} ${S3_PUB_PATH}
              for toolchain in $toolchain_files; do
                echo "Uploading ${toolchain} to S3";
                aws s3 cp ${toolchain} ${S3_PUB_PATH}
              done
            fi

  - name: create_sdk
    type: runSh
    steps:
      - IN: s3-token-simple
      - IN: meta-zephyr-sdk_ciRepo
      - IN: meta-zephyr-sdk_runCI
      - IN: github_token
      - TASK:
        - script: |
            test -f /build/IN/meta-zephyr-sdk_runCI/runCI/sdk.env && . /build/IN/meta-zephyr-sdk_runCI/runCI/sdk.env;
            cat /build/IN/meta-zephyr-sdk_runCI/runCI/sdk.env;
            if [ -n "${GIT_TAG_NAME}" ]; then
              export S3_PATH="s3://incoming.zephyrproject.org/sdk/${METAZEPHYRSDK_CIREPO_VERSIONNUMBER}";
              sudo apt-get install -y makeself p7zip-full cpio tree;
              sudo pip install awscli;
              aws s3 sync ${S3_PATH}/toolchains/ toolchains;
              chmod +x toolchains/*.sh;
              cp toolchains/make_zephyr_sdk.sh toolchains/template_dir .;
              sh ./make_zephyr_sdk.sh;
              aws s3 cp zephyr-sdk* ${S3_PATH}/;
              filename="zephyr-sdk-$GIT_TAG_NAME-setup.run"
              echo "SDK file name: ${filename}"
              if [ "${IS_PRERELEASE}" = "true" -o "${IS_RELEASE}" = "true" ]; then
                # Define variables.
                GH_API="https://api.github.com"
                GH_REPO="$GH_API/repos/zephyrproject-rtos/meta-zephyr-sdk"
                GH_TAGS="$GH_REPO/releases/tags/$GIT_TAG_NAME"
                AUTH="Authorization: token $GH_TOKEN"
                WGET_ARGS="--content-disposition --auth-no-challenge --no-cookie"
                CURL_ARGS="-LJO#"

                # Validate token.
                curl -o /dev/null -sH "$AUTH" $GH_REPO || { echo "Error: Invalid repo, token or network issue!";  exit 1; }

                # Read asset tags.
                response=$(curl -sH "$AUTH" $GH_TAGS)

                # Get ID of the asset based on given filename.
                eval $(echo "$response" | grep -m 1 "id.:" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
                [ "$id" ] || { echo "Error: Failed to get release id for tag: $tag"; echo "$response" | awk 'length($0)<100' >&2; exit 1; }

                # Upload asset
                echo "Uploading asset ${filename}... "

                # Construct url
                GH_ASSET="https://uploads.github.com/repos/zephyrproject-rtos/meta-zephyr-sdk/releases/$id/assets?name=$(basename $filename)"
                echo ${GH_ASSET}

                curl --data-binary @"$filename" -H "Authorization: token $GH_TOKEN" -H "Content-Type: application/octet-stream" $GH_ASSET
              fi
            fi


  - name: zephyr_runCI
    type: runCI
    steps:
      - IN: zephyr_ciRepo
      - IN: s3-token-simple
      - IN: codecov

  - name: zephyr-testing_runCI
    type: runCI
    steps:
      - IN: zephyr-testing_ciRepo
      - IN: s3-token
      - IN: codecov_testing

  - name: zephyr-daily-doc
    type: runSh
    steps:
      - IN: s3-token
      - IN: main_repo_doc
        switch: off
      - IN: daily-docs
      - TASK:
          name: daily_docs
          runtime:
            container: true
            options:
              imageName: zephyrprojectrtos/ci
              imageTag: v0.9.1
              pull: true
              options: "--privileged=true --tty --net=bridge"
          script:
            - cd $(shipctl get_resource_state "main_repo_doc");
            - scripts/ci/build-docs.sh

  - name: zephyr-checks
    type: runSh
    steps:
      - IN: github_token
      - IN: s3-token
      - IN: testing_repo
        showBuildStatus:  false
      - TASK:
          name: checks
          runtime:
            container: true
            options:
              imageName: zephyrprojectrtos/ci
              imageTag: v0.9.1
              pull: true
              options: "--privileged=true --tty --net=bridge"
          script:
            - cd $(shipctl get_resource_state "testing_repo")
            - pip3 install west
            - git fetch origin pull/${TESTING_REPO_PULL_REQUEST}/head
            - git checkout -f FETCH_HEAD
            - export SHA=$(git rev-parse HEAD)
            - git merge -q origin/${TESTING_REPO_BASE_BRANCH}
            - git rebase origin/${TESTING_REPO_BASE_BRANCH};
            - source zephyr-env.sh
            - export COMMIT_RANGE=origin/${TESTING_REPO_BASE_BRANCH}..HEAD
            - scripts/ci/what_changed.py -r ${TESTING_REPO_REPO_FULL_NAME} -p ${TESTING_REPO_PULL_REQUEST} --commits ${COMMIT_RANGE}
            - scripts/ci/check_compliance.py -g -r ${TESTING_REPO_REPO_FULL_NAME} -s -S ${SHA}
            - echo "Building a Pull Request";
            - scripts/ci/check_compliance.py -e Documentation --commits ${COMMIT_RANGE} -g -p ${TESTING_REPO_PULL_REQUEST} -r ${TESTING_REPO_REPO_FULL_NAME} -S ${SHA} -o first_pass.xml
            - echo "Building Documentation";
            - echo "Commit range:" ${COMMIT_RANGE}
            - >
              make htmldocs;
              if [ "$?" != "0" ]; then
                echo "Documentation build failed";
                exit 1;
              fi
            - >
              if [ -s doc/_build/doc.warnings ]; then
                echo " => New documentation warnings/errors";
                cp doc/_build/doc.warnings doc.warnings
              fi;
            - scripts/ci/check_compliance.py --commits ${COMMIT_RANGE} -g -p ${TESTING_REPO_PULL_REQUEST} -r ${TESTING_REPO_REPO_FULL_NAME} -S ${SHA} -m Documentation -o second_pass.xml
            - export S3_PATH="s3://builds.zephyrproject.org/${TESTING_REPO_REPO_FULL_NAME}/${TESTING_REPO_PULL_REQUEST}";
            - scripts/ci/merge_junit.py first_pass.xml second_pass.xml > compliance.xml
            - junit2html compliance.xml tests.html
            - mkdir -p ${TESTING_REPO_PULL_REQUEST}
            - cp *.html ${TESTING_REPO_PULL_REQUEST}
            - cp -a doc/_build/html ${TESTING_REPO_PULL_REQUEST}/docs
            - aws s3 cp s3://builds.zephyrproject.org/pr.html ${S3_PATH}/index.html
            - aws s3 sync ${TESTING_REPO_PULL_REQUEST} ${S3_PATH}

  - name: zephyr-checks-main
    type: runSh
    triggerMode: parallel
    steps:
      - IN: github_token
      - IN: s3-token
      - IN: main_repo
        showBuildStatus:  false
      - TASK:
          name: checks
          runtime:
            container: true
            options:
              imageName: zephyrprojectrtos/ci
              imageTag: v0.9.1
              pull: true
              options: "--privileged=true --tty --net=bridge"
          script:
            - sudo pip3 install -U west
            - cd $(shipctl get_resource_state "main_repo")
            - git fetch origin pull/${MAIN_REPO_PULL_REQUEST}/head
            - git checkout -f FETCH_HEAD
            - export SHA=$(git rev-parse HEAD)
            - git merge -q origin/${MAIN_REPO_BASE_BRANCH}
            - git rebase origin/${MAIN_REPO_BASE_BRANCH};
            - cd ..
            - cp -a gitRepo zephyr
            - west init -l zephyr || true
            - cd zephyr
            - west update
            - sudo pip3 install -r scripts/ci/requirements.txt
            - source zephyr-env.sh
            - export COMMIT_RANGE=origin/${MAIN_REPO_BASE_BRANCH}..HEAD
            - scripts/ci/what_changed.py -r ${MAIN_REPO_REPO_FULL_NAME} -p ${MAIN_REPO_PULL_REQUEST} --commits ${COMMIT_RANGE}
            - scripts/ci/check_compliance.py -g -r ${MAIN_REPO_REPO_FULL_NAME} -s -S ${SHA}
            - echo "Building a Pull Request";
            - echo "COMMIT_RANGE:" ${COMMIT_RANGE}
            - echo "MAIN_REPO_PULL_REQUEST:" ${MAIN_REPO_PULL_REQUEST}
            - echo "MAIN_REPO_REPO_FULL_NAME:" ${MAIN_REPO_REPO_FULL_NAME}
            - echo "SHA:" ${SHA}
            - scripts/ci/check_compliance.py -e Documentation --commits ${COMMIT_RANGE} -g -p ${MAIN_REPO_PULL_REQUEST} -r ${MAIN_REPO_REPO_FULL_NAME} -S ${SHA} -o first_pass.xml || true
            - cat /tmp/Kconfig.modules
            - west list --format={posixpath}
            - echo "Building Documentation";
            - echo "Commit range:" ${COMMIT_RANGE}
            - >
              make htmldocs || touch docs_failed;
              if [ -f docs_failed ]; then
                echo "Documentation build with 'make htmldocs' failed." >> doc.warnings;
              fi;
            - >
              if [ -s doc/_build/doc.warnings ]; then
                echo " => New documentation warnings/errors";
                cp doc/_build/doc.warnings doc.warnings
              fi;
            - scripts/ci/check_compliance.py --commits ${COMMIT_RANGE} -g -p ${MAIN_REPO_PULL_REQUEST} -r ${MAIN_REPO_REPO_FULL_NAME} -S ${SHA} -m Documentation --previous-run first_pass.xml -o second_pass.xml || true
            - >
              export S3_PATH="s3://builds.zephyrproject.org/${MAIN_REPO_REPO_FULL_NAME}/${MAIN_REPO_PULL_REQUEST}";
              scripts/ci/merge_junit.py first_pass.xml second_pass.xml > compliance.xml;
              junit2html compliance.xml tests.html;
              mkdir -p ${MAIN_REPO_PULL_REQUEST};
              cp *.html ${MAIN_REPO_PULL_REQUEST};
              if [ ! -f docs_failed ]; then
                cp -a doc/_build/html ${MAIN_REPO_PULL_REQUEST}/docs;
              fi;
              aws s3 cp s3://builds.zephyrproject.org/pr.html ${S3_PATH}/index.html;
              aws s3 sync ${MAIN_REPO_PULL_REQUEST} ${S3_PATH};
